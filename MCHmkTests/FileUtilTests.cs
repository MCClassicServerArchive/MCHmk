/*
    Copyright 2016 Jjp137

    Dual-licensed under the Educational Community License, Version 2.0 and
    the GNU General Public License, Version 3 (the "Licenses"); you may
    not use this file except in compliance with the Licenses. You may
    obtain a copy of the Licenses at

    http://www.opensource.org/licenses/ecl2.php
    http://www.gnu.org/licenses/gpl-3.0.html

    Unless required by applicable law or agreed to in writing,
    software distributed under the Licenses are distributed on an "AS IS"
    BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
    or implied. See the Licenses for the specific language governing
    permissions and limitations under the Licenses.
*/

using System;
using System.IO;

using MCHmk;

using NUnit.Framework;

namespace MCHmkTests {
    /// <summary>
    /// Tests the FileUtil methods.
    /// </summary>
    [TestFixture]
    public class FileUtilTests {
        /// <summary>
        /// Path to the temporary directory.
        /// </summary>
        private string tempDir;
        /// <summary>
        /// Path to the working directory before it was changed.
        /// </summary>
        private string oldCwd;

        [OneTimeSetUp]
        /// <summary>
        /// Called before any FileUtil tests are run. Use to set up anything in advance.
        /// </summary>
        public void Init() {
            // If we're in a environment where we somehow can't access the temporary directory, then oh well.
            tempDir = Path.GetTempPath();

            // Store the current working directory before switching to the temporary directory in case some
            // other tests (wrongly) depend on it.
            oldCwd = Directory.GetCurrentDirectory();
            Directory.SetCurrentDirectory(tempDir);
        }

        [Test]
        /// <summary>
        /// Test BasePathCheck().
        /// </summary>
        public void BasePathCheckTests() {
            // Get randomly-named file names. They aren't actually created.
            string randomDir = Path.GetRandomFileName();
            string randomFile = Path.GetRandomFileName();

            // Test with the first path as the absolute path
            Assert.IsTrue(FileUtil.BasePathCheck(tempDir, randomFile));
            Assert.IsTrue(FileUtil.BasePathCheck(tempDir, Path.Combine(randomFile, randomFile)));
            Assert.IsFalse(FileUtil.BasePathCheck(tempDir, Path.Combine("..", randomFile)));
            Assert.IsFalse(FileUtil.BasePathCheck(tempDir, Path.Combine("..", "..", "..", "..", randomFile)));

            // Test with the first path as a relative path.
            Assert.IsTrue(FileUtil.BasePathCheck(randomDir, randomFile));
            Assert.IsTrue(FileUtil.BasePathCheck(randomDir, Path.Combine(randomFile, randomFile)));
            Assert.IsFalse(FileUtil.BasePathCheck(randomDir, Path.Combine("..", randomFile)));
            Assert.IsFalse(FileUtil.BasePathCheck(randomDir, Path.Combine("..", "..", "..", "..", randomFile)));

            // Test for input such as: "extra/text" and "../text_heh"
            Assert.IsFalse(FileUtil.BasePathCheck(randomDir, Path.Combine("..", randomDir + "blah")));
        }

        [Test]
        /// <summary>
        /// Test ValidName().
        /// </summary>
        public void ValidNameTests() {
            // Normal file
            Assert.IsTrue(FileUtil.ValidName("welcome.txt"));

            // Actual copy files and backups
            Assert.IsTrue(FileUtil.ValidName("random4'"));  // Note the single quote at the end
            Assert.IsTrue(FileUtil.ValidName("tnt+sponge.copy"));
            Assert.IsTrue(FileUtil.ValidName("-.-"));

            // Actual backup names that should have never accepted since they use disallowed characters on Windows
            Assert.IsFalse(FileUtil.ValidName(":3ff"));
            Assert.IsFalse(FileUtil.ValidName(">:o"));
            Assert.IsFalse(FileUtil.ValidName("art!"));
            Assert.IsFalse(FileUtil.ValidName("city\\"));

            // Actual copy file that should have never been accepted since it uses asterisks
            Assert.IsFalse(FileUtil.ValidName("(*gamestop*)-games.copy"));

            // Null character check
            Assert.IsFalse(FileUtil.ValidName((char)0 + "main.lvl"));
        }

        [OneTimeTearDown]
        /// <summary>
        /// Called after all FileUtil tests are run. Use to clean up any leftovers generated by the tests.
        /// </summary>
        public void Cleanup() {
            // Switch back to what the current directory used to be.
            Directory.SetCurrentDirectory(oldCwd);
        }
    }
}
